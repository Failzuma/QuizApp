// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password_hash String
  created_at    DateTime  @default(now())
  answers       Answer[]
  room_participant RoomParticipant[]
}

model Map {
  map_identifier String @id @unique
  title          String
  created_at     DateTime @default(now())
  nodes          MapNode[]
  obstacles      MapObstacle[]
  quizzes        Quiz[] // A map can be a blueprint for many quizzes
}

// New table for playable quiz instances
model Quiz {
  quiz_id        Int       @id @default(autoincrement())
  title          String
  map_identifier String
  map            Map       @relation(fields: [map_identifier], references: [map_identifier])
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model MapNode {
  node_id        Int        @id @default(autoincrement())
  map_identifier String
  map            Map        @relation(fields: [map_identifier], references: [map_identifier])
  title          String?
  content        String?
  posX           Int?
  posY           Int?
  created_at     DateTime   @default(now())
  questions      Question[]
}

model MapObstacle {
  obstacle_id    Int      @id @default(autoincrement())
  map_identifier String
  map            Map      @relation(fields: [map_identifier], references: [map_identifier])
  posX           Int
  posY           Int
  width          Int
  height         Int
  created_at     DateTime @default(now())
}

model Question {
  question_id     Int       @id @default(autoincrement())
  node_id         Int
  mapNode         MapNode   @relation(fields: [node_id], references: [node_id])
  question_text   String
  options         Json? // For multiple choice, matching pairs, etc.
  correct_answer  String
  created_at      DateTime  @default(now())
  answers         Answer[]
}

model Answer {
  answer_id         Int       @id @default(autoincrement())
  user_id           Int
  user              User      @relation(fields: [user_id], references: [user_id])
  question_id       Int
  question          Question  @relation(fields: [question_id], references: [question_id])
  user_answer       String
  is_correct        Boolean
  waktu_pengerjaan  DateTime  @default(now())
  room_participant_id Int?
  room_participant  RoomParticipant? @relation(fields: [room_participant_id], references: [id])
}

model Room {
  id                Int       @id @default(autoincrement())
  room_code         String    @unique
  map_identifier    String
  created_at        DateTime  @default(now())
  is_active         Boolean   @default(true)
  participants      RoomParticipant[]
}

model RoomParticipant {
  id            Int      @id @default(autoincrement())
  room_id       Int
  room          Room     @relation(fields: [room_id], references: [id])
  user_id       Int
  user          User     @relation(fields: [user_id], references: [user_id])
  session_score Int      @default(0)
  joined_at     DateTime @default(now())
  answers       Answer[]
}
