
// datasource db defines the database connection details.
datasource db {
  provider = "postgresql" // Or your preferred database provider
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// -- AUTH & USER --
model User {
  user_id     Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password_hash String
  created_at  DateTime  @default(now())
  role        String    @default("player") // e.g., 'player', 'admin'
  answers     Answer[]
}

// -- MAP & CONTENT STRUCTURE --
model Map {
  map_id          Int      @id @default(autoincrement())
  map_identifier  String   @unique // e.g., "dunia_tenses_1"
  title           String   
  created_at      DateTime @default(now())
  
  nodes           MapNode[]
  quizzes         Quiz[]
}

model MapNode {
  node_id         Int      @id @default(autoincrement())
  map_identifier  String
  title           String?
  content         String?
  posX            Float?
  posY            Float?
  
  map             Map        @relation(fields: [map_identifier], references: [map_identifier])
  questions       Question[]
}

model MapObstacle {
  obstacle_id     Int    @id @default(autoincrement())
  map_identifier  String
  posX            Float
  posY            Float
  width           Float
  height          Float
}

// -- QUIZ & QUESTIONS --

// Represents a playable instance of a quiz
model Quiz {
  quiz_id         Int      @id @default(autoincrement())
  map_identifier  String
  title           String   // e.g., "Latihan Harian Tenses", "Ujian Tengah Semester"
  created_at      DateTime @default(now())

  map             Map      @relation(fields: [map_identifier], references: [map_identifier])
}

model Question {
  question_id     Int      @id @default(autoincrement())
  node_id         Int
  question_text   String
  correct_answer  String
  created_at      DateTime @default(now())
  
  mapNode         MapNode  @relation(fields: [node_id], references: [node_id])
  options         Option[]
  answers         Answer[]
}

model Option {
  option_id       Int      @id @default(autoincrement())
  question_id     Int
  option_text     String
  
  question        Question @relation(fields: [question_id], references: [question_id], onDelete: Cascade)
}


// -- USER PROGRESS & RESULTS --
model Answer {
  answer_id         Int      @id @default(autoincrement())
  user_id           Int
  question_id       Int
  selected_option   String
  is_correct        Boolean
  waktu_pengerjaan  DateTime @default(now())

  user              User     @relation(fields: [user_id], references: [user_id])
  question          Question @relation(fields: [question_id], references: [question_id])
}

    